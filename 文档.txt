数据结构设计:
    // 图的邻接矩阵表示法
    typedef struct {
        int vertex;
        int** matrix;
    } Graph;

    // 图的三元组表示法
    typedef struct {
        int rows;
        int** array;
    } Triples;



函数功能说明:
    /*
        graph:传入的图
        功能:返回prim算法得到的邻接矩阵表示的最小生成树
    */
    Graph* prim(Graph* graph);

    /*
        graph:传入的图
        功能:返回kruskal算法得到的邻接矩阵表示的最小生成树
    */
    Graph* kruskal(Graph* graph);

    /*
        graph:传入的图
        功能:返回去边法得到的邻接矩阵表示的最小生成树
    */
    Graph* delEdge(Graph* graph);

    /*
        vertex:顶点个数
        传顶点个数, 返回邻接矩阵表示的无边图
    */
    Graph* newGraph(int vertex);

    /*
        graph: 复制的对象
        return: 复制的结果
        功能: 将图复制, 返回复制后的图
    */
    Graph* copyGraph(Graph* graph);

    /*
        graph: 删除的对象
        功能: 删除图,释放内存
    */
    void delGraph(Graph* graph);

    /*
        directed:1为有向图,0为无向图
        graph:传入的图
        功能:把关系与权值存入图
    */
    Graph* fillGraph(Graph* graph, int directed);

    /*
        graph:传入的图
        功能:打印邻接矩阵
    */
    void printGraph(Graph* graph);

    /*
        graph:传入的图
        功能:传邻接矩阵表示的图, 返回三元组表示的图
    */
    Triples* toTriple(Graph* graph);

    /*
        triples:传入的图
        功能删除三元组表示的图
    */
    void delTriples(Triples* triples);


模块划分:
    1.读入输入,生成图
    2.用图生成最小生成树
    3.输出结果,释放内存


时间复杂度分析: 设图有v个顶点, e条边
    prim算法:
        创建一个没有边的图g    o(1)
        创建一个集合A, 保存最小生成树的顶点, 初始保存任意一个顶点    o(1)
        当集合A元素的个数小于图的顶点数:    o(v)
            找到最新加入A的顶点a与集合外的顶点中边权最小的顶点i    o(v)
            将a与i的边加入图g    o(i)
            将i加入集合A    o(1)
            将a变为i    o(1)
        返回图g
    因此prim算法整体复杂度为 o(v^2)

    kruskal算法:
        将邻接表表示的图转化为三元组表示    o(v^2)
        创建一个没有边的图g    o(1)
        对三元组从小到大排序    o(e^2)
        遍历三元组:    o(e)
            把边加入图g    o(1)
            如果图g有环    o(v)
                将边删除
        返回图g
    因此kruskal算法整体复杂度为 o(v^2+e^2)

    去边法:
        将邻接表表示的图转化为三元组表示    o(v^2)
        创建一个复制的图g    o(1)
        对三元组从大到小排序    o(e^2)
        遍历三元组:    o(e)
            把边从图g中删除    o(1)
            如果图g不连通    o(v)
                将边加入图g
        返回图g
    因此去边法整体复杂度为 o(v^2+e^2)