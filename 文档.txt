数据结构设计:
    // 图的邻接矩阵表示法
    // vertax表示顶点个数
    typedef struct {
        int vertex;
        int** matrix;
    } Graph;

    // 图的三元组表示法
    // rows表示行数
    typedef struct {
        int rows;
        int** array;
    } Triples;



函数功能说明:
    /*
        graph:传入的图
        功能:返回prim算法得到的邻接矩阵表示的最小生成树
    */
    Graph* prim(Graph* graph);

    /*
        graph:传入的图
        功能:返回kruskal算法得到的邻接矩阵表示的最小生成树
    */
    Graph* kruskal(Graph* graph);

    /*
        graph:传入的图
        功能:返回去边法得到的邻接矩阵表示的最小生成树
    */
    Graph* delEdge(Graph* graph);

    /*
        vertex:顶点个数
        传顶点个数, 返回邻接矩阵表示的无边图
    */
    Graph* newGraph(int vertex);

    /*
        graph: 复制的对象
        return: 复制的结果
        功能: 将图复制, 返回复制后的图
    */
    Graph* copyGraph(Graph* graph);

    /*
        graph: 删除的对象
        功能: 删除图,释放内存
    */
    void delGraph(Graph* graph);

    /*
        directed:1为有向图,0为无向图
        graph:传入的图
        功能:把关系与权值存入图
    */
    Graph* fillGraph(Graph* graph, int directed);

    /*
        graph:传入的图
        输出邻接矩阵格式:第一行一行[[x x x x x x x],
                        最后一行  [x x x x x x x]]
                        中间的行  [x x x x x x x],
        功能:打印邻接矩阵
    */
    void printGraph(Graph* graph);

    /*
        graph:传入的图
        功能:传邻接矩阵表示的图, 返回三元组表示的图
    */
    Triples* toTriple(Graph* graph);

    /*
        triples:传入的图
        功能:删除三元组表示的图
    */
    void delTriples(Triples* triples);

输入:
    顶点个数
    顶点 顶点 权值
    顶点 顶点 权值
    顶点 顶点 权值
    顶点 顶点 权值
    ...
    end




模块划分:
    1.读入输入,生成图
    2.用图生成最小生成树
    3.输出结果,释放内存
