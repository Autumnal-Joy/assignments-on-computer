#if !defined(TREE_H)
#define TREE_H
#include "main.h"

/*
    根结点不为空时，递归调用本函数后序遍历左子树，
    继续调用本函数后序遍历右子树，然后输出根结点值。
*/
void postorder(node *ptr);

/*
   建立队列，并将根节点入队列。
   进入循环
       出一个队列中的元素，并将其输出，然后将该元素的左孩子，右孩子先后入队列
       若队列为空，退出循环
*/
void levelorder(node *ptr);

/*
   返回找到结点的指针(node *),没有则返回空(NULL)
   若根结点为空则返回空。
   根结点不为空时判断根结点是否为待找结点，
       是则返回，否则继续调用本函数查找左子树；
   若返回值不为空则返回该返回值，否则继续调用本函数查找右子树，并将返回值返回。
*/
node *search(node *ptr, char c);

/*
   返回找到结点的指针(node *),没有则返回空(NULL)
   若根结点为空则返回空。
   根结点不为空时判断根结点是否为待找结点，
       是则返回，否则继续调用本函数查找左子树；
   若返回值不为空则返回该返回值，否则继续调用本函数查找右子树，并将返回值返回。
*/
void path(node *root, char c);

#endif // TREE_H
